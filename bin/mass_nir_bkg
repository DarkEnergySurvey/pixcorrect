#!/usr/bin/env python3

import argparse
import time
import os
import re
import sys
from pixcorrect.PixCorrectDriver import filelist_to_list
import subprocess
import multiprocessing


EXE = "nir_bkg"

def run_subprocess(command):
    process = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    stdout, stderr = process.communicate()
    return process.returncode, stdout.decode(), stderr.decode()


if (__name__ == "__main__"):

    parser = argparse.ArgumentParser(description="Define list-based inputs to run many executions of mass_nwgint with multiprocessing")

    parser.add_argument('--imglist', action='store', type=str, default=None, required=True,
                        help='List of image files to be processed')
    parser.add_argument('--outlist', action='store', type=str, default=None, required=False,
                        help='List of resulting output image files')
#   This could be added to give back ground lists (see optional WCS immplementation in mass_coadd_nwgint for a possible method)
#    parser.add_argument('--bkglist', action='store', type=str, default=None, required=False,
#                        help='List of resulting background image files (optional)')
    parser.add_argument('--dryrun',  action='store_true', default=False, 
                        help='Print what will be executed but do NOT then perform execution')
    parser.add_argument('--nproc',  action='store', type=int, default=1, help='Number of nir_bkg to run as subprocesses simultaneously')

    parser.add_argument('--image_name_in', type=str, default='nwgint', required=False,
                        help='String to replace in input image filenames')
    parser.add_argument('--image_name_out', type=str, default='nwgintb', required=False,
                        help='Replacement string for output image filenames')

#   Note this is not really being used correctly and in the usage below would only get rid of the 
#   switch (if the list included the "-") but not the arguments for the switch

    ignore_options = ['imglist', 'outlist','dryrun','bkglist','nproc','image_name_in','image_name_out']
    args, unknownargs = parser.parse_known_args()

#
#   Grab the img_list and read them in...
#
    ImgList = []
    try:
        ImgList = filelist_to_list(args.imglist,check_files_exist=False,append_missing_files=True)
    except:
        print('Failure reading imglist file names from {:s}'.format(args.imglist))
        exit(0)


    if (args.outlist is None):
#
#       Case where outlist is not provided (create one based on replacement)
#
        RegReplWorked=True
        OutList=[]
        for Img in ImgList:
            # Make the name needed for output
            nmatch = len(re.findall(args.image_name_in, Img))
            if nmatch != 1:
                print('Could not create output name for image file named <{:}> replacing <{:}> w/ <{:}>'.format(Img,args.image_name_in,args.image_name_out))
                RegReplWorked=False
                # do not exit yet... in case there are more than one cases to be brought to the users attention
            else:
                OutList.append(re.sub(args.image_name_in, args.image_name_out, Img))
        if(not(RegReplWorked)):
            exit(1)
    else:
#
#       args.outlist provided (attempt to use that)
#
        try:
            OutList = filelist_to_list(args.outlist,check_files_exist=False,append_missing_files=True)
        except:
            print('Failure reading outlist file names from {:s}'.format(args.outlist))
            exit(1)

#
#   Some feedback that things are working.
#
    nImgList=len(ImgList)
    nOutList=len(OutList)
    print("Image list: {:d} files".format(nImgList))
    print("Output list: {:d} files".format(nOutList))
    if (nImgList != nOutList):
        print("Number of inputs and outputs do not match!  Aborting!")
        exit(1)

#
#   Use the unknown arguments to form the remainder of the command line for subprocess call of coadd_nwgint
#
    cmdlist=[]
    alt_cmdlist=[]
    for uarg in unknownargs:
        if (uarg not in ignore_options):
            cmdlist.append(uarg)
            alt_cmdlist.append(uarg)
    fixed_cmdargs=' '.join(map(str,cmdlist))
    print("Fixed command line options: ",fixed_cmdargs)

#   Create a pool of command lines that will be executed below

    cmd_pool=[]
    print("#################################################")
    for i, img in enumerate(ImgList):
        cmd = f"{EXE} -i {ImgList[i]} --sub {OutList[i]} {fixed_cmdargs} "
        cmd_pool.append(cmd)

#
#   Use subprocess to execute coadd_nwgint multiple times (once for each list entry)
#
    NumNonZero=0
    LastNonZero=0
    AllReturnZero=True
    if (not(args.dryrun)):
        with multiprocessing.Pool(processes=args.nproc) as pool:
            results = pool.map(run_subprocess, cmd_pool)

        for cmd, (returncode,stdout,stderr) in zip(cmd_pool,results):
            print("#################################################")
            print(f"Command: {cmd}")
            print(f"Stdout:\n{stdout}")
            print(f"Stderr:\n{stderr}")
            print(f"Returncode: {returncode}")
            if (returncode != 0):
                AllReturnZero=False
                NumNonZero=NumNonZero+1
                LastNonZero=returncode

    else:
        print("NO EXECUTION (DRY RUN)")
        for cmd in cmd_pool:
            print("#################################################")
            print(f"Command: {cmd}")

#
#   Should be done add one last output so that the case where non-zero exits have occured are more obvious.
#
    print("#################################################")
    if (AllReturnZero):
        print("# Completed mass execution of nir_bkg ({:d} times) with no non-zero returncodes detected".format(len(cmd_pool)))
    else:
        print("# Warning: Completed mass execution of nir_bkg ({:d} times) with {:d} NON-ZERO returncode(s) detected".format(len(cmd_pool),NumNonZero))
        print("# Warning: Last non-zero status was {:}".format(LastNonZero))

    exit(0)
