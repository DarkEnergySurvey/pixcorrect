#!/usr/bin/env python
"""Example step in image correction"""

# imports
from functools import partial
import ctypes
import sys
from os import path

import numpy as np

from pixcorrect import corr_util
from pixcorrect import proddir
from pixcorrect.dbc import precondition, postcondition

# constants

# exception classes
# interface functions
# classes
# internal functions & classes

# Lowest level access to the C library function
harmonic_mean_lib = np.ctypeslib.load_library('libharmonic_mean.so',
                                           path.join(proddir, 'lib')) 
_harmonic_mean = harmonic_mean_lib.harmonic_mean
_harmonic_mean.restype = ctypes.c_int
_harmonic_mean.argtypes = [np.ctypeslib.ndpointer(ctypes.c_float, ndim=2,
                                                  flags='aligned, contiguous, writeable'),
                           np.ctypeslib.ndpointer(ctypes.c_float, ndim=2,
                                                  flags='aligned, contiguous'),
                           ctypes.c_int]

# Add a wrapper around the library interface to 
# check diminsions and verify the call returned okay.
@precondition(corr_util.match_array_shapes, (0,1))
@postcondition(corr_util.no_lib_error)
def harmonic_mean(ar1, ar2):
    """Add array 1 to array 1 in inverse quadrature
    
    :Parameters:
        -`ar1`: a numpy array
        -`ar2`: a numpy array

    @returns: 0 if successful, an error code otherwise
    """
    nelem = ar1.size
    result = _harmonic_mean(ar1, ar2, nelem)
    return result

