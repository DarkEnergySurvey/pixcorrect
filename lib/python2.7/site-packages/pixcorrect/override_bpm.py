#!/usr/bin/env python
"""Override a bad pixel map (pbm) to a DES image 
"""

# imports
from functools import partial
import ctypes
import sys
from os import path

import numpy as np

from pixcorrect import corr_util
from pixcorrect.corr_util import PrepMain, logger
from pixcorrect import proddir
from despyfits.DESImage import DESImage, DESImageCStruct

# constants

# Which section of the config file to read for this step
config_section = 'obpm'

# exception classes
# interface functions

def override_bpm(image, bpm_im):
    """Override a bad pixel mask in a DES image

    :Parameters:
        - `image`: the DESImage in which the BPM is to be overriden
        - `bpm_im`: the DESImage with the bad pixel mask

    Applies the correction "in place"
    """

    logger.info('Overriding BPM')
    obpm(image.cstruct, bpm_im.cstruct)
    logger.debug('Finished overriding BPM')

# classes
# internal functions & classes

# Lowest level access to the C library function
bpm_lib = np.ctypeslib.load_library('libbpm.so', path.join(proddir, 'lib')) 
obpm = bpm_lib.obpm
obpm.restype = ctypes.c_int
obpm.argtypes = [DESImageCStruct, DESImageCStruct]

def override_bpm_main(config):
    """A driver for overriding the BPM

    :Parameters:
        -`config`: a python ConfigParsers object

    @returns: 0 if successful
    """
    # Load files and images here if we don't want
    # bias to clean up the memory, because other drivers that
    # call bias might want it for future steps.
    in_fname = config.get(config_section, 'image_in_fname')
    im = DESImage.load(in_fname)

    bpm_fname = config.get(config_section, 'obpm')
    logger.info('reading BPM from %s' % bpm_fname)
    bpm_im = DESImage.load(bpm_fname)
    
    override_bpm(im, bpm_im)

    out_fname = config.get(config_section, 'image_out_fname')
    im.save(out_fname)

    return 0

def add_obpm_args(prep_main):
    prep_main.parser.add_argument('--image_in_fname', nargs=1, 
                                  default=None,
                                  help='input image file name')
    prep_main.parser.add_argument('--obpm', nargs=1, 
                                  default=None, 
                                  help='bad pixel mask filename')
    prep_main.parser.add_argument('--image_out_fname', nargs=1, 
                                  default=None,
                                  help='output image file name')
    prep_main.switch_opts['obpm']=['image_in_fname', 
                                   'obpm',
                                   'image_out_fname']

if __name__ == '__main__':
    prep_main = PrepMain(config_section, 'Override a bad pixel mask')
    add_obpm_args(prep_main)
    config = prep_main()
    try:
        override_bpm_main(config)
        sys.exit(0)
    except:
        # If we want to set specific exit status values
        # based on what exceptions get thrown, do that
        # here
        raise
