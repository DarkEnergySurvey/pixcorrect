#!/usr/bin/env python
"""Example step in image correction"""

# imports
from functools import partial
import ctypes
import sys

import numpy as np
import pyfits

from pixcorrect import corr_util
from pixcorrect import imtypes
from pixcorrect.dbc import precondition, postcondition
from pixcorrect.corr_util import prep_main, logger

from foo import foo
from bar import bar

################################################################################

# constants
# exception classes
# interface functions
# classes
# internal functions & classes

        
# The high level driver when run stand-alone
def main(config):
    # All the code here, asside from one call for each step, should 
    # be assiciated with shoveling data between steps. Everything else should
    # take inside the code for its respective step.

    # Are we configured to do the named step?
    def do_step(step_name):
        if not config.has_option('global', step_name):
            return False

        doit = config.getboolean('global', step_name)
        return doit

    # For all data we want to carry from step to step, define the variable
    # and assign it to None here. This makes it easier to deal with loading 
    # files from disk when needed. (Yes, something could be done with
    # var() and globals(), or with exceptions, instead.)
    hdu1a = None
    hdu1b = None
    hdu3 = None

    # foo
    if do_step('foo'):
        if hdu1a is None:
            hdu1a = corr_util.read_im_hdu(config, 'foo', 'im1_fname', 'im1_hdu')

        # Actually do the calculation
        foo(hdu1a, config)

        # foo changed hdu1a in place, so we still have the same location 
        # in memory, but it contains something different now. To make sure the
        # same variables mean the same things always, rename it:
        hdu1b = hdu1a
        hdu1a = None

        # If we are configured to save hdu1b, do
        if config.has_option('foo', 'im1_out_fname'):
            corr_util.write_im_hdu(config, 'foo', hdu1b, 'im1_out_fname')

        # If we won't need it later, let pythons garbage collector free the
        # memory
        if not do_step('bar'):
            hdu1b = None

    # bar
    if do_step('bar'):
        # If we skipped step foo, we need to load hdu1
        if hdu1b is None:
            hdu1b = corr_util.read_im_hdu(config, 'bar', 'im1_fname', 'im1_hdu')

        # In real code, if we are just going to delete hdu3 right in the same 
        # step, its allocation and deletion should be within bar, as 
        # hdu2 is treated in foo.
        hdu3 = pyfits.ImageHDU(np.empty_like(hdu1b.data))
        bar(hdu1b, hdu3, config)

        # If configured to, save the result
        if config.has_option('bar', 'im3_out_fname'):
            corr_util.write_im_hdu(config, 'bar', hdu3, 'im3_out_fname')

        # If a later step were added that would need hdu3, we would delay
        # deleting it until we were done with it, as we did with hdu1b in
        # step foo
        hdu3 = None

        # ... and the same with hdu1b
        hdu1b = None

    return 0

if __name__ == '__main__':
    config = prep_main("Do steps foo and bar", "imcorrect")
    try:
        main(config)
        sys.exit(0)
    except:
        # If we want to set specific exit status values
        # based on what exceptions get thrown, do that
        # here
        raise
