#!/usr/bin/env python
"""Apply a bad pixel map (pbm) to a DES image 
"""

# imports
import ctypes
import sys
from os import path

import numpy as np

from pixcorrect.dbc import precondition, postcondition
from pixcorrect import corr_util
from pixcorrect.corr_util import PrepMain, logger
from pixcorrect import proddir
from despyfits.DESImage import DESImage, DESImageCStruct

# constants

# Which section of the config file to read for this step
config_section = 'mask_saturation'

# exception classes
# interface functions

@postcondition(corr_util.no_lib_error)
def mask_saturation(image):
    """Mark saturated pixels in the mask of an image

    :Parameters:
        - `image`: the DESImage to which the columns are to be fixed

    Applies the correction "in place"
    """

    logger.info('Masking saturated pixels')
    num_saturated = ctypes.c_int()
    c_call_status = mask_saturation_c(image.cstruct, num_saturated)
    logger.info('Masked %d pixels as saturated' % num_saturated.value)
    return c_call_status

# classes
# internal functions & classes

# Lowest level access to the C library function
masksatr_lib = np.ctypeslib.load_library('libmasksatr.so',
                                         path.join(proddir, 'lib')) 
mask_saturation_c = masksatr_lib.mask_saturation
mask_saturation_c.restype = ctypes.c_int
mask_saturation_c.argtypes = [DESImageCStruct, ctypes.POINTER(ctypes.c_int)]

def mask_saturation_main(config):
    """A driver for masking saturated pixels

    :Parameters:
        -`config`: a python ConfigParsers object

    @returns: 0 if successful
    """
    # Load files and images here if we don't want
    # bias to clean up the memory, because other drivers that
    # call bias might want it for future steps.
    in_fname = config.get(config_section, 'in')
    im = DESImage.load(in_fname)

    mask_saturation(im)

    out_fname = config.get(config_section, 'out')
    im.save(out_fname)

    return 0

def add_mask_saturation_args(prep_main):
    prep_main.parser.add_argument('-i', '--in', nargs=1, 
                                  default=None,
                                  help='input image file name')
    prep_main.parser.add_argument('-o', '--out', nargs=1, 
                                  default=None,
                                  help='output image file name')

if __name__ == '__main__':
    prep_main = PrepMain(config_section, 'Mark saturated pixels in the mask')
    add_mask_saturation_args(prep_main)
    config = prep_main()
    try:
        mask_saturation_main(config)
        sys.exit(0)
    except:
        # If we want to set specific exit status values
        # based on what exceptions get thrown, do that
        # here
        raise
